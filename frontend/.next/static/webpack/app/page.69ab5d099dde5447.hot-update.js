"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   articleApi: function() { return /* binding */ articleApi; },\n/* harmony export */   healthApi: function() { return /* binding */ healthApi; },\n/* harmony export */   isApiError: function() { return /* binding */ isApiError; },\n/* harmony export */   searchApi: function() { return /* binding */ searchApi; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\n// Axios 인스턴스 생성\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL:  false ? 0 : \"/api\",\n    timeout: 30000,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// 요청 인터셉터\napi.interceptors.request.use((config)=>{\n    // 인증 토큰이 있다면 헤더에 추가\n    const token =  true ? localStorage.getItem(\"auth_token\") : 0;\n    if (token) {\n        config.headers.Authorization = \"Bearer \".concat(token);\n    }\n    return config;\n}, (error)=>{\n    return Promise.reject(error);\n});\n// 응답 인터셉터\napi.interceptors.response.use((response)=>{\n    return response;\n}, (error)=>{\n    var _error_response_data, _error_response, _error_response1, _error_response_data1, _error_response2;\n    const apiError = {\n        message: ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || error.message || \"알 수 없는 오류가 발생했습니다.\",\n        status: ((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.status) || 500,\n        code: (_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : (_error_response_data1 = _error_response2.data) === null || _error_response_data1 === void 0 ? void 0 : _error_response_data1.code\n    };\n    // 인증 오류 처리\n    if (apiError.status === 401) {\n        if (true) {\n            localStorage.removeItem(\"auth_token\");\n            window.location.href = \"/login\";\n        }\n    }\n    return Promise.reject(apiError);\n});\n// API 메서드들\nconst articleApi = {\n    // 기사 목록 조회\n    getArticles: async function() {\n        let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, size = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20, sort = arguments.length > 2 ? arguments[2] : void 0, filters = arguments.length > 3 ? arguments[3] : void 0;\n        var _filters_tags;\n        const params = new URLSearchParams({\n            page: page.toString(),\n            size: size.toString()\n        });\n        if (sort) {\n            params.append(\"sort_field\", sort.field);\n            params.append(\"sort_order\", sort.order);\n        }\n        if (filters === null || filters === void 0 ? void 0 : (_filters_tags = filters.tags) === null || _filters_tags === void 0 ? void 0 : _filters_tags.length) {\n            params.append(\"tags\", filters.tags.join(\",\"));\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.author) {\n            params.append(\"author\", filters.author);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.dateFrom) {\n            params.append(\"date_from\", filters.dateFrom);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.dateTo) {\n            params.append(\"date_to\", filters.dateTo);\n        }\n        const response = await api.get(\"/articles?\".concat(params));\n        return response.data;\n    },\n    // 기사 상세 조회\n    getArticle: async (id)=>{\n        const response = await api.get(\"/articles/\".concat(id));\n        return response.data;\n    },\n    // 기사 요약 생성\n    createSummary: async function(articleId) {\n        let summaryType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"brief\";\n        const response = await api.post(\"/articles/\".concat(articleId, \"/summary\"), {\n            summary_type: summaryType\n        });\n        return response.data;\n    },\n    // 기사 요약 목록 조회\n    getArticleSummaries: async (articleId)=>{\n        const response = await api.get(\"/api/articles/\".concat(articleId, \"/summaries\"));\n        return response.data;\n    }\n};\nconst searchApi = {\n    // 키워드 검색\n    keywordSearch: async (request)=>{\n        const params = new URLSearchParams({\n            q: request.query\n        });\n        if (request.limit) {\n            params.append(\"limit\", request.limit.toString());\n        }\n        if (request.offset) {\n            params.append(\"offset\", request.offset.toString());\n        }\n        const response = await api.get(\"/api/search/keyword?\".concat(params));\n        return response.data;\n    },\n    // 시맨틱 검색\n    semanticSearch: async (request)=>{\n        const params = new URLSearchParams({\n            q: request.query\n        });\n        if (request.limit) {\n            params.append(\"limit\", request.limit.toString());\n        }\n        if (request.offset) {\n            params.append(\"offset\", request.offset.toString());\n        }\n        const response = await api.get(\"/api/search/semantic?\".concat(params));\n        return response.data;\n    },\n    // RAG 기반 질의응답\n    ragSearch: async (request)=>{\n        const response = await api.post(\"/api/search/rag\", request);\n        return response.data;\n    }\n};\nconst healthApi = {\n    // 헬스 체크\n    getHealth: async ()=>{\n        const response = await api.get(\"/health\");\n        return response.data;\n    }\n};\n// 에러 핸들링 유틸리티\nconst isApiError = (error)=>{\n    return error && typeof error === \"object\" && \"message\" in error && \"status\" in error;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});